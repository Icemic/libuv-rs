#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug)]
pub enum FsType {
    FS_ACCESS,
    FS_CHMOD,
    FS_CHOWN,
    FS_CLOSE,
    FS_CLOSEDIR,
    FS_COPYFILE,
    FS_CUSTOM,
    FS_FCHMOD,
    FS_FCHOWN,
    FS_FDATASYNC,
    FS_FSTAT,
    FS_FSYNC,
    FS_FTRUNCATE,
    FS_FUTIME,
    FS_LCHOWN,
    FS_LINK,
    FS_LSTAT,
    FS_MKDIR,
    FS_MKDTEMP,
    FS_MKSTEMP,
    FS_OPEN,
    FS_OPENDIR,
    FS_READ,
    FS_READDIR,
    FS_READLINK,
    FS_REALPATH,
    FS_RENAME,
    FS_RMDIR,
    FS_SCANDIR,
    FS_SENDFILE,
    FS_STAT,
    FS_STATFS,
    FS_SYMLINK,
    FS_UNLINK,
    FS_UTIME,
    FS_WRITE,
    UNKNOWN,
}

impl crate::FromInner<uv::uv_fs_type> for FsType {
    fn from_inner(t: uv::uv_fs_type) -> FsType {
        match t {
            uv::uv_fs_type_UV_FS_ACCESS => FsType::FS_ACCESS,
            uv::uv_fs_type_UV_FS_CHMOD => FsType::FS_CHMOD,
            uv::uv_fs_type_UV_FS_CHOWN => FsType::FS_CHOWN,
            uv::uv_fs_type_UV_FS_CLOSE => FsType::FS_CLOSE,
            uv::uv_fs_type_UV_FS_CLOSEDIR => FsType::FS_CLOSEDIR,
            uv::uv_fs_type_UV_FS_COPYFILE => FsType::FS_COPYFILE,
            uv::uv_fs_type_UV_FS_CUSTOM => FsType::FS_CUSTOM,
            uv::uv_fs_type_UV_FS_FCHMOD => FsType::FS_FCHMOD,
            uv::uv_fs_type_UV_FS_FCHOWN => FsType::FS_FCHOWN,
            uv::uv_fs_type_UV_FS_FDATASYNC => FsType::FS_FDATASYNC,
            uv::uv_fs_type_UV_FS_FSTAT => FsType::FS_FSTAT,
            uv::uv_fs_type_UV_FS_FSYNC => FsType::FS_FSYNC,
            uv::uv_fs_type_UV_FS_FTRUNCATE => FsType::FS_FTRUNCATE,
            uv::uv_fs_type_UV_FS_FUTIME => FsType::FS_FUTIME,
            uv::uv_fs_type_UV_FS_LCHOWN => FsType::FS_LCHOWN,
            uv::uv_fs_type_UV_FS_LINK => FsType::FS_LINK,
            uv::uv_fs_type_UV_FS_LSTAT => FsType::FS_LSTAT,
            uv::uv_fs_type_UV_FS_MKDIR => FsType::FS_MKDIR,
            uv::uv_fs_type_UV_FS_MKDTEMP => FsType::FS_MKDTEMP,
            uv::uv_fs_type_UV_FS_MKSTEMP => FsType::FS_MKSTEMP,
            uv::uv_fs_type_UV_FS_OPEN => FsType::FS_OPEN,
            uv::uv_fs_type_UV_FS_OPENDIR => FsType::FS_OPENDIR,
            uv::uv_fs_type_UV_FS_READ => FsType::FS_READ,
            uv::uv_fs_type_UV_FS_READDIR => FsType::FS_READDIR,
            uv::uv_fs_type_UV_FS_READLINK => FsType::FS_READLINK,
            uv::uv_fs_type_UV_FS_REALPATH => FsType::FS_REALPATH,
            uv::uv_fs_type_UV_FS_RENAME => FsType::FS_RENAME,
            uv::uv_fs_type_UV_FS_RMDIR => FsType::FS_RMDIR,
            uv::uv_fs_type_UV_FS_SCANDIR => FsType::FS_SCANDIR,
            uv::uv_fs_type_UV_FS_SENDFILE => FsType::FS_SENDFILE,
            uv::uv_fs_type_UV_FS_STAT => FsType::FS_STAT,
            uv::uv_fs_type_UV_FS_STATFS => FsType::FS_STATFS,
            uv::uv_fs_type_UV_FS_SYMLINK => FsType::FS_SYMLINK,
            uv::uv_fs_type_UV_FS_UNLINK => FsType::FS_UNLINK,
            uv::uv_fs_type_UV_FS_UTIME => FsType::FS_UTIME,
            uv::uv_fs_type_UV_FS_WRITE => FsType::FS_WRITE,
            _ => FsType::UNKNOWN,
        }
    }
}

impl crate::IntoInner<uv::uv_fs_type> for &FsType {
    fn into_inner(self) -> uv::uv_fs_type {
        match self {
            FsType::FS_ACCESS => uv::uv_fs_type_UV_FS_ACCESS,
            FsType::FS_CHMOD => uv::uv_fs_type_UV_FS_CHMOD,
            FsType::FS_CHOWN => uv::uv_fs_type_UV_FS_CHOWN,
            FsType::FS_CLOSE => uv::uv_fs_type_UV_FS_CLOSE,
            FsType::FS_CLOSEDIR => uv::uv_fs_type_UV_FS_CLOSEDIR,
            FsType::FS_COPYFILE => uv::uv_fs_type_UV_FS_COPYFILE,
            FsType::FS_CUSTOM => uv::uv_fs_type_UV_FS_CUSTOM,
            FsType::FS_FCHMOD => uv::uv_fs_type_UV_FS_FCHMOD,
            FsType::FS_FCHOWN => uv::uv_fs_type_UV_FS_FCHOWN,
            FsType::FS_FDATASYNC => uv::uv_fs_type_UV_FS_FDATASYNC,
            FsType::FS_FSTAT => uv::uv_fs_type_UV_FS_FSTAT,
            FsType::FS_FSYNC => uv::uv_fs_type_UV_FS_FSYNC,
            FsType::FS_FTRUNCATE => uv::uv_fs_type_UV_FS_FTRUNCATE,
            FsType::FS_FUTIME => uv::uv_fs_type_UV_FS_FUTIME,
            FsType::FS_LCHOWN => uv::uv_fs_type_UV_FS_LCHOWN,
            FsType::FS_LINK => uv::uv_fs_type_UV_FS_LINK,
            FsType::FS_LSTAT => uv::uv_fs_type_UV_FS_LSTAT,
            FsType::FS_MKDIR => uv::uv_fs_type_UV_FS_MKDIR,
            FsType::FS_MKDTEMP => uv::uv_fs_type_UV_FS_MKDTEMP,
            FsType::FS_MKSTEMP => uv::uv_fs_type_UV_FS_MKSTEMP,
            FsType::FS_OPEN => uv::uv_fs_type_UV_FS_OPEN,
            FsType::FS_OPENDIR => uv::uv_fs_type_UV_FS_OPENDIR,
            FsType::FS_READ => uv::uv_fs_type_UV_FS_READ,
            FsType::FS_READDIR => uv::uv_fs_type_UV_FS_READDIR,
            FsType::FS_READLINK => uv::uv_fs_type_UV_FS_READLINK,
            FsType::FS_REALPATH => uv::uv_fs_type_UV_FS_REALPATH,
            FsType::FS_RENAME => uv::uv_fs_type_UV_FS_RENAME,
            FsType::FS_RMDIR => uv::uv_fs_type_UV_FS_RMDIR,
            FsType::FS_SCANDIR => uv::uv_fs_type_UV_FS_SCANDIR,
            FsType::FS_SENDFILE => uv::uv_fs_type_UV_FS_SENDFILE,
            FsType::FS_STAT => uv::uv_fs_type_UV_FS_STAT,
            FsType::FS_STATFS => uv::uv_fs_type_UV_FS_STATFS,
            FsType::FS_SYMLINK => uv::uv_fs_type_UV_FS_SYMLINK,
            FsType::FS_UNLINK => uv::uv_fs_type_UV_FS_UNLINK,
            FsType::FS_UTIME => uv::uv_fs_type_UV_FS_UTIME,
            FsType::FS_WRITE => uv::uv_fs_type_UV_FS_WRITE,
            _ => uv::uv_fs_type_UV_FS_UNKNOWN,
        }
    }
}
